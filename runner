#!/usr/bin/perl -w

use strict;
use File::Basename;

my ( @orig_videos ) = @ARGV;

my $cq_level = 50;
my $N_chunks = scalar @orig_videos;

sub video_basename {
  my ( $filename ) = @_;
  my ( $basename ) = basename( $filename, ".y4m" );
  die unless defined $basename;
  return $basename;
};

my $global_iteration_counter = 0;

# create output directory
mkdir "outputs";

# phase 1
print STDERR "=== Phase 1 (vpxenc, decode) ===\n";
for ( my $i = 0; $i < $N_chunks; $i++ ) {
  my $this_input_video = $orig_videos[ $i ];
  my $chunk_name = video_basename( $this_input_video );

  system qq{./phase1 ${this_input_video} ${cq_level} outputs/${chunk_name}.${global_iteration_counter}.ivf outputs/${chunk_name}.${global_iteration_counter}.exit.state}
    and die q{phase1 exited with error};
}
$global_iteration_counter++;

# phase 2a
print STDERR "=== Phase 2a (encode-given-state) ===\n";
for ( my $i = 1; $i < $N_chunks; $i++ ) {
  my $this_input_video = $orig_videos[ $i ];
  my $chunk_name = video_basename( $this_input_video );
  my $last_chunk_name = video_basename( $orig_videos[ $i - 1 ] );
  my $last_iteration = $global_iteration_counter - 1;

  die unless ( $last_iteration >= 0 );

  system qq{./phase2a ${this_input_video} outputs/${chunk_name}.${last_iteration}.ivf outputs/${last_chunk_name}.${last_iteration}.exit.state outputs/${chunk_name}.${global_iteration_counter}.ivf outputs/${chunk_name}.${global_iteration_counter}.exit.state}
    and die q{phase2a exited with error};
}
$global_iteration_counter++;

# phase 2b
print STDERR "=== Phase 2b (rebase) ===\n";
for ( my $i = 2; $i < $N_chunks; $i++ ) {
  my $this_input_video = $orig_videos[ $i ];
  my $chunk_name = video_basename( $this_input_video );
  my $last_chunk_name = video_basename( $orig_videos[ $i - 1 ] );

  my $last_iteration = $global_iteration_counter - 1;
  my $last_chunk_last_iteration = $global_iteration_counter - 1;
  my $last_chunk_last_last_iteration = 0;

  if ( $i > 2 ) {
    $last_chunk_last_iteration = 2;
  }

  system qq{./phase2b ${this_input_video} outputs/${chunk_name}.${last_iteration}.ivf outputs/${last_chunk_name}.${last_chunk_last_last_iteration}.exit.state outputs/${last_chunk_name}.${last_chunk_last_iteration}.exit.state outputs/${chunk_name}.${global_iteration_counter}.ivf outputs/${chunk_name}.${global_iteration_counter}.exit.state}
    and die q{phase2b exited with error};
}
$global_iteration_counter++;

# playability
print STDERR "=== Testing (decode-bundle) ===\n";
my $ivfs = "";
for ( my $i = 0; $i < $N_chunks; $i++ ) {
  my $this_input_video = $orig_videos[ $i ];
  my $chunk_name = video_basename( $this_input_video );

  if ( $i == 0 ) {
    $ivfs = qq{outputs/${chunk_name}.0.ivf};
  }
  elsif ( $i == 1 ) {
    $ivfs .= qq{\noutputs/${chunk_name}.1.ivf};
  }
  else {
    $ivfs .= qq{\noutputs/${chunk_name}.2.ivf};
  }
}

system qq{echo "${ivfs}" | xc-decode-bundle > /dev/null}
  and die q{xc-decode-bundle exited with error}
